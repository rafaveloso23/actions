name: Terraform, Azure CLI, and Annotations Workflow

on:
  push:
    branches:
      - main
    paths:
      - contoso-01/**

  pull_request:
    paths:
      - contoso-01/**

permissions:
  contents: read
  id-token: write

jobs:
  terraform-dev:
    name: 'terraform-dev'
    runs-on: ubuntu-latest
    environment: development
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE_DEV }}
      PATH_TO_MODULE: contoso-01
      CURRENT_OBJECT_ID: ${{ secrets.OBJECT_ID_DEV}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git Credentials
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      
      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Verify SP Access in Key Vault
        id: check-access
        run: |
            # Fetch the access policies of the Azure Key Vault
            ACCESS_POLICIES=$(az keyvault show --name "kvrvstfsd" --query properties.accessPolicies -o json)
  
            # Check if the CURRENT_OBJECT_ID exists in the access policies
            if echo "$ACCESS_POLICIES" | jq -e ".[] | select(.objectId==\"${{ secrets.OBJECT_ID_DEV }}\")" > /dev/null; then
              echo "SP Object ID is present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=true" >> $GITHUB_ENV
            else
              echo "SP Object ID is NOT present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=false" >> $GITHUB_ENV
            fi
  
      - name: Debug Access Policy Result
        run: |
            echo "Access Policy Exists: $ACCESS_POLICY_EXISTS"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd $PATH_TO_MODULE
          terraform init -var-file="terraform.tfvars"

      - name: Terraform Plan
        run: |
          cd $PATH_TO_MODULE
          terraform plan -var-file="terraform.tfvars" -var="client_id=${{ secrets.AZURE_CLIENT_ID_DEV }}" -var="environment=${{ secrets.ENVIRONMENT_DEV }}" -var="current_object_exist=$ACCESS_POLICY_EXISTS"

      - name: Terraform Apply
        run: |
          cd $PATH_TO_MODULE
          terraform apply -var-file="terraform.tfvars" -var="client_id=${{ secrets.AZURE_CLIENT_ID_DEV }}" -var="environment=${{ secrets.ENVIRONMENT_DEV }}" -var="current_object_exist=$ACCESS_POLICY_EXISTS" -auto-approve

  manual-approval-destroy-dev:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-dev
    if: success()
    permissions:
      issues: write

    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: rafaveloso23
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Destroy"
          issue-body: "Please approve or deny the deployment."

  terraform-destroy-dev:
    name: 'terraform-destroy-dev'
    runs-on: ubuntu-latest
    needs: manual-approval-destroy-dev
    environment: development
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE_DEV }}
      PATH_TO_MODULE: contoso-01

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git Credentials
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Verify SP Access in Key Vault
        id: check-access
        run: |
            # Fetch the access policies of the Azure Key Vault
            ACCESS_POLICIES=$(az keyvault show --name "kvrvstfsd" --query properties.accessPolicies -o json)
  
            # Check if the CURRENT_OBJECT_ID exists in the access policies
            if echo "$ACCESS_POLICIES" | jq -e ".[] | select(.objectId==\"${{ secrets.OBJECT_ID_DEV }}\")" > /dev/null; then
              echo "SP Object ID is present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=true" >> $GITHUB_ENV
            else
              echo "SP Object ID is NOT present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=false" >> $GITHUB_ENV
            fi
  
      - name: Debug Access Policy Result
        run: |
            echo "Access Policy Exists: $ACCESS_POLICY_EXISTS"



      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd $PATH_TO_MODULE
          terraform init -var-file="terraform.tfvars"

      - name: Terraform Destroy
        run: |
          cd $PATH_TO_MODULE
          terraform destroy -var-file="terraform.tfvars" -var="client_id=${{ secrets.AZURE_CLIENT_ID_DEV }}" -var="environment=${{ secrets.ENVIRONMENT_DEV }}" -var="current_object_exist=$ACCESS_POLICY_EXISTS" -auto-approve

  terraform-prd:
    name: 'terraform-prd'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE_PRD }}
      PATH_TO_MODULE: contoso-01
      CURRENT_OBJECT_ID: ${{ secrets.OBJECT_ID_PRD}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git Credentials
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}

      - name: Verify SP Access in Key Vault
        id: check-access
        run: |
            # Fetch the access policies of the Azure Key Vault
            ACCESS_POLICIES=$(az keyvault show --name "kvrvstfsd" --query properties.accessPolicies -o json)
  
            # Check if the CURRENT_OBJECT_ID exists in the access policies
            if echo "$ACCESS_POLICIES" | jq -e ".[] | select(.objectId==\"${{ secrets.OBJECT_ID_PRD }}\")" > /dev/null; then
              echo "SP Object ID is present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=true" >> $GITHUB_ENV
            else
              echo "SP Object ID is NOT present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=false" >> $GITHUB_ENV
            fi
  
      - name: Debug Access Policy Result
        run: |
            echo "Access Policy Exists: $ACCESS_POLICY_EXISTS"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd $PATH_TO_MODULE
          terraform init -var-file="terraform.tfvars"

      - name: Terraform Plan
        run: |
          cd $PATH_TO_MODULE
          terraform plan -var-file="terraform.tfvars" -var="client_id=${{ secrets.AZURE_CLIENT_ID_PRD }}" -var="environment=${{ secrets.ENVIRONMENT_PRD }}" -var="current_object_exist=$ACCESS_POLICY_EXISTS"

      - name: Terraform Apply
        run: |
          cd $PATH_TO_MODULE
          terraform apply -var-file="terraform.tfvars" -var="client_id=${{ secrets.AZURE_CLIENT_ID_PRD }}" -var="environment=${{ secrets.ENVIRONMENT_PRD }}" -var="current_object_exist=$ACCESS_POLICY_EXISTS" -auto-approve

  manual-approval-destroy-prd:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-prd
    if: success()
    permissions:
      issues: write

    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: rafaveloso23
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Destroy"
          issue-body: "Please approve or deny the deployment."

  terraform-destroy-prd:
    name: 'terraform-destroy-prd'
    runs-on: ubuntu-latest
    needs: manual-approval-destroy-prd
    environment: production
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE_PRD }}
      PATH_TO_MODULE: contoso-01

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git Credentials
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}

      - name: Verify SP Access in Key Vault
        id: check-access
        run: |
            # Fetch the access policies of the Azure Key Vault
            ACCESS_POLICIES=$(az keyvault show --name "kvrvstfsd" --query properties.accessPolicies -o json)
  
            # Check if the CURRENT_OBJECT_ID exists in the access policies
            if echo "$ACCESS_POLICIES" | jq -e ".[] | select(.objectId==\"${{ secrets.OBJECT_ID_PRD }}\")" > /dev/null; then
              echo "SP Object ID is present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=true" >> $GITHUB_ENV
            else
              echo "SP Object ID is NOT present in the Key Vault access policy."
              echo "ACCESS_POLICY_EXISTS=false" >> $GITHUB_ENV
            fi
  
      - name: Debug Access Policy Result
        run: |
            echo "Access Policy Exists: $ACCESS_POLICY_EXISTS"


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd $PATH_TO_MODULE
          terraform init -var-file="terraform.tfvars"

      - name: Terraform Destroy
        run: |
          cd $PATH_TO_MODULE
          terraform destroy -var-file="terraform.tfvars" -var="client_id=${{ secrets.AZURE_CLIENT_ID_PRD }}" -var="environment=${{ secrets.ENVIRONMENT_PRD }}" -var="current_object_exist=$ACCESS_POLICY_EXISTS" -auto-approve
